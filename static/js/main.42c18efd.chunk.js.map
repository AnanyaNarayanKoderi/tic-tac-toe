{"version":3,"sources":["components/Icons.js","App.js","index.js"],"names":["Icon","choice","className","tiktacArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","playAgain","changeItem","index","toast","type","Container","position","Row","Col","md","Button","style","background","onClick","map","value","Card","CardBody","ReactDOM","render","document","getElementById"],"mappings":"8LAgBeA,EAZJ,SAAC,GACR,OADmB,EAAVC,QAEL,IAAK,QACD,OAAO,cAAC,IAAD,CAASC,UAAU,gBAC9B,IAAK,SACG,OAAO,cAAC,IAAD,CAAaA,UAAU,iBACtC,QACI,OAAO,cAAC,IAAD,CAAOA,UAAU,Y,+DCO9BC,G,YAAc,IAAIC,MAAM,GAAGC,KAAK,KA8GvBC,EA5GH,WACR,MAA4BC,oBAAS,GAArC,mBAAKC,EAAL,KAAcC,EAAd,KACA,EAAkCF,mBAAS,IAA3C,mBAAKG,EAAL,KAAiBC,EAAjB,KAEMC,EAAY,WACdH,GAAW,GACXE,EAAc,IACdR,EAAYE,KAAK,KAqCfQ,EAAa,SAACC,GAChB,OAAIJ,EACOK,YAAM,4BAA6B,CAAEC,KAAM,YAE5B,IAAtBb,EAAYW,GAQLC,YAAM,uCAAwC,CAAEC,KAAM,WAP7Db,EAAYW,GAASN,EAAU,QAAU,SACzCC,GAAYD,QAlCO,KAAnBL,EAAY,IAAaA,EAAY,KAAOA,EAAY,IAAMA,EAAY,KAAOA,EAAY,GAC7FQ,EAAcR,EAAY,GAAK,cAEP,KAAnBA,EAAY,IAAaA,EAAY,KAAOA,EAAY,IAAMA,EAAY,KAAOA,EAAY,GAClGQ,EAAcR,EAAY,GAAK,cAEP,KAAnBA,EAAY,IAAaA,EAAY,KAAOA,EAAY,IAAMA,EAAY,KAAOA,EAAY,GAClGQ,EAAcR,EAAY,GAAK,cAEP,KAAnBA,EAAY,IAAaA,EAAY,KAAOA,EAAY,IAAMA,EAAY,KAAOA,EAAY,GAClGQ,EAAcR,EAAY,GAAK,cAEP,KAAnBA,EAAY,IAAaA,EAAY,KAAOA,EAAY,IAAMA,EAAY,KAAOA,EAAY,GAClGQ,EAAcR,EAAY,GAAK,cAEP,KAAnBA,EAAY,IAAaA,EAAY,KAAOA,EAAY,IAAMA,EAAY,KAAOA,EAAY,GAClGQ,EAAcR,EAAY,GAAK,cAEP,KAAnBA,EAAY,IAAaA,EAAY,KAAOA,EAAY,IAAMA,EAAY,KAAOA,EAAY,GAClGQ,EAAcR,EAAY,GAAK,cAEP,KAAnBA,EAAY,IAAaA,EAAY,KAAOA,EAAY,IAAMA,EAAY,KAAOA,EAAY,IAClGQ,EAAcR,EAAY,GAAK,iBAuBvC,OACI,eAACc,EAAA,EAAD,CAAWf,UAAU,MAArB,eACI,cAAC,IAAD,CAAgBgB,SAAS,gBAAzB,eACA,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAKC,GAAI,EAAGnB,UAAU,cAAtB,UAGQQ,EACI,8BAEI,+BACKA,EAED,cAACY,EAAA,EAAD,CAAQC,MAAO,CAAEC,WAAY,WAAaC,QAASb,EAAnD,uBAMJ,8BACI,+BAEKJ,EAAU,eAAiB,gBAE5B,cAACc,EAAA,EAAD,CAAQC,MAAO,CAAEC,WAAY,WAAaC,QAASb,EAAnD,wBAKpB,qBAAKV,UAAU,OAAf,SACKC,EAAYuB,KAAI,SAACC,EAAOb,GAAR,OACb,cAACc,EAAA,EAAD,CAAMH,QAAS,WAAQZ,EAAWC,IAAlC,SACI,cAACe,EAAA,EAAD,CAAU3B,UAAU,MAApB,SACI,cAAC,EAAD,CAAMD,OAAQE,EAAYW,iBA9BlD,WC1EZgB,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,W","file":"static/js/main.42c18efd.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FaTimes,FaRegCircle,FaPen} from \"react-icons/fa\";  //to import x,o ,pen icons from react icons (external module)\r\n\r\n\r\nconst Icon=({choice})=>{\r\n    switch(choice){\r\n        case \"cross\":\r\n            return <FaTimes className=\"icons cross\"/>;\r\n        case \"circle\":\r\n                return <FaRegCircle className=\"icons circle\"/>\r\n        default:\r\n            return <FaPen className=\"icons\" />\r\n\r\n    }\r\n}\r\n\r\nexport default Icon;","import React, { useState } from \"react\";\r\nimport Icon from \"./components/Icons\";\r\n\r\n\r\n//to include the toastify contents\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\n//import reactstrap\r\n\r\nimport { Button, Container, Card, CardBody, Row, Col } from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\n\r\n//to use css\r\nimport \"./styles.css\"   //place at last to dominate\r\n\r\nconst tiktacArray = new Array(9).fill(\"\") //array of 9 elements by default filled with null\r\n\r\nconst App = () => {\r\n    let [isCross, setIsCross] = useState(true)  //initially cross is set\r\n    let [winMessage, setWinMessage] = useState(\"\")\r\n\r\n    const playAgain = () => {   //when user press play or reset button,game will start from beginning\r\n        setIsCross(true)\r\n        setWinMessage(\"\")\r\n        tiktacArray.fill(\"\")\r\n    }\r\n\r\n\r\n//possible conditions at which players might win\r\n\r\n    const findWinner = () => {\r\n        \r\n        \r\n        if (tiktacArray[0] !== \"\" && tiktacArray[0] === tiktacArray[1] && tiktacArray[1] === tiktacArray[2]) {\r\n            setWinMessage(tiktacArray[0] + \" has won!!\")\r\n        }\r\n        else if (tiktacArray[3] !== \"\" && tiktacArray[3] === tiktacArray[4] && tiktacArray[3] === tiktacArray[5]) {\r\n            setWinMessage(tiktacArray[3] + \" has won!!\")\r\n        }\r\n        else if (tiktacArray[6] !== \"\" && tiktacArray[6] === tiktacArray[7] && tiktacArray[7] === tiktacArray[8]) {\r\n            setWinMessage(tiktacArray[6] + \" has won!!\")\r\n        }\r\n        else if (tiktacArray[0] !== \"\" && tiktacArray[3] === tiktacArray[0] && tiktacArray[0] === tiktacArray[6]) {\r\n            setWinMessage(tiktacArray[0] + \" has won!!\")\r\n        }\r\n        else if (tiktacArray[1] !== \"\" && tiktacArray[1] === tiktacArray[4] && tiktacArray[4] === tiktacArray[7]) {\r\n            setWinMessage(tiktacArray[1] + \" has won!!\")\r\n        }\r\n        else if (tiktacArray[2] !== \"\" && tiktacArray[2] === tiktacArray[5] && tiktacArray[5] === tiktacArray[8]) {\r\n            setWinMessage(tiktacArray[2] + \" has won!!\")\r\n        }\r\n        else if (tiktacArray[0] !== \"\" && tiktacArray[0] === tiktacArray[4] && tiktacArray[4] === tiktacArray[8]) {\r\n            setWinMessage(tiktacArray[0] + \" has won!!\")\r\n        }\r\n        else if (tiktacArray[2] !== \"\" && tiktacArray[2] === tiktacArray[4] && tiktacArray[4] === tiktacArray[6]) {\r\n            setWinMessage(tiktacArray[2] + \" has won!!\")\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    const changeItem = (index) => {\r\n        if (winMessage) {   //toast message gets displayed when the player continues playing even after winning\r\n            return toast(\"Game has already got over\", { type: \"success\" })\r\n        }\r\n        if (tiktacArray[index] == \"\") {  //onclick it shows circle or cross mark accordingly\r\n            tiktacArray[index] = isCross ? \"cross\" : \"circle\"\r\n            setIsCross(!isCross)\r\n            \r\n        }\r\n        else {  //if player  clicks on the same card which is alreay clicked,this toast message is displayed\r\n        \r\n          \r\n            return toast(\"You have already filled this place!!\", { type: \"error\" })\r\n        }\r\n        findWinner()  \r\n    }\r\n\r\n    return (\r\n        <Container className=\"p-5\">  {/* padding 5*/}\r\n            <ToastContainer position=\"bottom-center\" > </ToastContainer>\r\n            <Row>\r\n                <Col md={6} className=\"offset-md-3\">\r\n                    {\r\n                        //to display the winner\r\n                        winMessage ? (\r\n                            <div>\r\n\r\n                                <h1>\r\n                                    {winMessage}\r\n\r\n                                    <Button style={{ background: \"#0F044C\" }} onClick={playAgain}>Play</Button>\r\n                                </h1>\r\n                            </div>\r\n                        )\r\n                            :\r\n                            (\r\n                                <div>\r\n                                    <h1>\r\n\r\n                                        {isCross ? \"Cross's Turn\" : \"Circle's Turn\"}\r\n\r\n                                        <Button style={{ background: \"#0F044C\" }} onClick={playAgain}>Reset</Button>\r\n                                    </h1>\r\n                                </div>\r\n                            )\r\n                    }\r\n                    <div className=\"grid\">\r\n                        {tiktacArray.map((value, index) => (\r\n                            <Card onClick={() => { changeItem(index) }}>\r\n                                <CardBody className=\"box\">\r\n                                    <Icon choice={tiktacArray[index]} />\r\n                                </CardBody>\r\n                            </Card>\r\n                        ))}\r\n\r\n                    </div>\r\n                </Col> {/*medium scale */}\r\n            </Row>\r\n\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(<App />,document.getElementById(\"root\"));"],"sourceRoot":""}